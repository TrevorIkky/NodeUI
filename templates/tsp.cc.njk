{# vim:ft=jinja 
#}

{% include "fragments/routing-inc.njk" %}

using namespace operations_research;

struct DataModel {
  const std::vector<std::vector<int64>> distance_matrix{
  {% set comma = joiner() %}
  {% for v in matrix %}
    {{ comma() }} { {{ v | join(", ") }} }
  {% endfor %}
  };
  const int num_vehicles = {{ vehicles }};
  const RoutingIndexManager::NodeIndex depot{ {{ start }} };
{% block capacity %}{% endblock %} 
};

int main(int argc, char** argv) {
  DataModel data;

  RoutingIndexManager manager(data.distance_matrix.size(), data.num_vehicles,
                              data.depot);

  {# Create Routing Index Manager #}
  RoutingModel routing(manager);

  {# takes any pair of locations and returns distance between them#}
  const int transit_callback_index = routing.RegisterTransitCallback(
      [&data, &manager](int64 from_index, int64 to_index) -> int64 {
        auto from_node = manager.IndexToNode(from_index).value();
        auto to_node = manager.IndexToNode(to_index).value();
        return data.distance_matrix[from_node][to_node];
      });

  routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index);

  {% block dimension %}{% endblock %}

  {# Setting first solution heuristic. #}
  RoutingSearchParameters searchParameters = DefaultRoutingSearchParameters();
  searchParameters.set_first_solution_strategy(
      FirstSolutionStrategy::PATH_CHEAPEST_ARC);

  {# Solve the problem. #}
  const Assignment* solution = routing.SolveWithParameters(searchParameters);

  {% block output %}
  if (argc > 1) {
    std::ofstream ofile;
    ofile.open (argv[1]); 

  json output;
  int64 index = routing.Start({{ start }});
  int64 route_distance{ {{ start }} };
  std::vector<int64> path;
  std::vector<json> vehicles;
  json route;
  while (routing.IsEnd(index) == false) {
    path.push_back(manager.IndexToNode(index).value());
    int64 previous_index = index;
    index = solution->Value(routing.NextVar(index));
    route_distance +=
        routing.GetArcCostForVehicle(previous_index, index, int64{0});
  }
  path.push_back(manager.IndexToNode(index).value());
  route["path"] = path;
  route["distance"] = route_distance;
  vehicles.push_back(route);
  output["vehicles"] = vehicles;
  output["solver_time"] = routing.solver()->wall_time();

  ofile << output.dump();
  ofile.close();
  std::cout << "Wrote to output file\n";
 }
  {% endblock %}
  {# return results as JSON #}
  return EXIT_SUCCESS;
  }
