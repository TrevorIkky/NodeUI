{% extends "tsp.cc.njk" %}

{% block dimension %}
  routing.AddDimension(transit_callback_index, 0, 10000,
                       true,
                       "Distance");
  routing.GetMutableDimension("Distance")->SetGlobalSpanCostCoefficient(100);

{% endblock %}

{% block output %}
  if (argc > 1) {
    std::ofstream ofile;
    ofile.open (argv[1]); 

  int64 total_distance{0};
  json output;
  std::vector<json> vehicles;
  for (int vehicle_id = 0; vehicle_id < data.num_vehicles; ++vehicle_id) {
    int64 index = routing.Start(vehicle_id);
    int64 route_distance{0};
    int64 route_load{0};
    json route;
    std::vector<int64> path;
    while (routing.IsEnd(index) == false) {
      int64 node_index = manager.IndexToNode(index).value();
      path.push_back(manager.IndexToNode(index).value());
      int64 previous_index = index;
      index = solution->Value(routing.NextVar(index));
      route_distance +=
          routing.GetArcCostForVehicle(previous_index, index, int64{vehicle_id});
    }
    path.push_back(manager.IndexToNode(index).value());
    route["path"] = path;
    route["distance"] = route_distance;
    total_distance = std::max(route_distance, total_distance);
    vehicles.push_back(route);
  }
  output["vehicles"] = vehicles;
  output["total_distance"] = total_distance;
  output["solver_time"] = routing.solver()->wall_time();

  ofile << output.dump();
  ofile.close();
  std::cout << "Wrote to output file\n";
  }
{% endblock %}
